{"version":3,"sources":["logo.svg","components/Config.js","components/Barcode.js","components/Print.js","App.js","reportWebVitals.js","index.js"],"names":["Config","props","c","useState","file","setFile","id","onClick","type","value","onChange","e","target","files","accept","required","Barcode","inputRef","useBarcode","code","width","style","className","ref","Print","state","data","this","console","log","printed","maxRows","Math","floor","maxCols","maxLabelsToPrint","fromatedW","toString","formatedH","document","border","paddingTop","height","margin","display","flexWrap","alignContent","justifyContent","label","textRow","padding","map","el","i","QUANTITEE_RECUE","FOURNISSEUR","multiples","quantity","parseInt","index","push","FORMES","TAILLE","COULEUR","PV","REFERENCE","CODES_BARRES","newEl","Component","App","componentRef","useRef","handlePrint","useReactToPrint","content","current","f","Papa","parse","header","complete","res","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8b17e007.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport './config.css'\r\n// import ReactToPrint from 'react-to-print';\r\n\r\n\r\nconst Config = (props) => {\r\n    const {c} = props\r\n    const [file, setFile] = useState(null)\r\n    const renderPrint = () => {\r\n        return <div id='print_section'>\r\n            {/* <input onClick={() => c(file)} id='print_button' type='button' value='IMPRESSION' /> */}\r\n            <input onClick={() => setFile(null)} type='button' value='changer de fichier' />\r\n        </div>\r\n    }\r\n    return ( \r\n        <div>\r\n            <h1>Configuration de mon impression</h1>\r\n            {!file ? <input onChange={(e) => c(e.target.files[0])} type='file' id='files' accept='.csv' required /> : renderPrint()}\r\n           \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Config;","import React from 'react';\r\nimport { useBarcode } from 'react-barcodes';\r\n\r\nconst Barcode = (props) => {\r\n    const {inputRef} = useBarcode({\r\n        value: props.code,\r\n        width: 1\r\n    })\r\n    return ( \r\n        <img style={{\r\n            width: \"120px\"\r\n        }} className='barcode' ref={inputRef} />\r\n     );\r\n}\r\n \r\nexport default Barcode;","\r\n\r\nimport React, { Component } from 'react'\r\nimport Barcode from './Barcode'\r\n\r\nexport default class Print extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: props.file\r\n        }\r\n    }\r\n    render() {\r\n        var data = this.props.file\r\n        console.log(this.state)\r\n        var printed = 0\r\n        var labelWidth = 4;\r\n        var labelHeight = 3;\r\n        var maxRows = Math.floor(29.7 / labelHeight) - 1\r\n        var maxCols = Math.floor(21 / labelWidth) - 1\r\n        var maxLabelsToPrint = maxRows * maxCols\r\n        console.log(21 / labelWidth)\r\n        console.log(maxRows)\r\n        console.log(maxCols)\r\n        var fromatedW = labelWidth.toString() + \"cm\"\r\n        var formatedH = labelHeight.toString() + \"cm\"\r\n        console.log(fromatedW)\r\n\r\n        const style = {\r\n            document: {\r\n                border: \"1px solid black\",\r\n                paddingTop: \"5px\",\r\n                width: \"210mm\",\r\n                height: \"297mm\",\r\n                margin: \"auto\",\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                alignContent: \"flex-start\",\r\n                justifyContent: \"center\",\r\n            },\r\n            label: {\r\n                width: fromatedW,\r\n                height: formatedH\r\n            },\r\n            textRow: {\r\n                padding: \"0px\"\r\n            }\r\n        }\r\n        return (\r\n            <div style={style.document} className=\"document\">\r\n                {this.state.data.map((el, i) => {\r\n                    if (printed === maxLabelsToPrint) {\r\n                        console.log(\"LIMIT\",data)\r\n                        return\r\n                    }\r\n                    if (el.QUANTITEE_RECUE === \"0\") return\r\n                    if (el.FOURNISSEUR === \"\") return\r\n                    console.log(\"NEW LABEL\",data)\r\n                    const multiples = []\r\n                    const quantity = parseInt(el.QUANTITEE_RECUE)\r\n                    for (let index = 0; index < quantity; index++) {\r\n                        printed++\r\n\r\n                        multiples.push(<div key={i + index} style={style.label} className='item'>\r\n                            <div style={style.textRow} id='item_row_first'>\r\n                                <p>{el.FORMES}</p>\r\n                                <p>{el.TAILLE}</p>\r\n                            </div>\r\n                            <div id='item_row_second'>\r\n                                <p>{el.COULEUR}</p>\r\n                                <p>{el.PV + \"â‚¬\"}</p>\r\n                            </div>\r\n                            <div id='item_row_third'>\r\n                                <p>{el.FOURNISSEUR}</p>\r\n                                <p>{el.REFERENCE}</p>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <Barcode code={el.CODES_BARRES} />\r\n                            </div>\r\n                        </div>)\r\n                    }\r\n                    const newEl = { ...el, QUANTITEE_RECUE: \"0\" }\r\n                    data = [...this.state.data, newEl]\r\n                    return multiples\r\n\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Papa from 'papaparse'\nimport { useEffect, useState, useRef } from 'react';\nimport Config from './components/Config';\nimport Print from './components/Print';\nimport Barcode from './components/Barcode';\nimport ReactToPrint from 'react-to-print';\n// import { useBarcode } from '@createnextapp/react-barcode';\n// import bwipjs from 'bwip-js'\nimport { useReactToPrint } from 'react-to-print';\nfunction App() {\n  const [status, setStatus] = useState('config')\n  const [file, setFile] = useState(null)\n  const componentRef = useRef();\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current,\n  });\n \n\n  // const [file, setFile] = useState(null)\n  // const onChange = (e) => {\n  //   e.preventDefault();\n  //   Papa.parse(e.target.files[0], {\n  //     header: true,\n  //     complete: (res) => {\n  //       console.log(res)\n  //       setFile(res)\n  //     }\n  //   })\n\n  // }\n\n  // const pushRef = (code) => {\n\n  // }\n  // useEffect(() => {\n\n  // }, [file])\n  // const displayLabels = (file) => {\n  //   if (file) {\n  //     return file.data.map((el, index) => {\n\n\n  //       if (el.QUANTITEE_RECUE > 0 && el.FOURNISSEUR !== \"\") {\n  //         const multiply = []\n\n  //         for (let i = 0; i < el.QUANTITEE_RECUE; i++) {\n\n  //           console.log(el)\n  //           multiply.push(\n  //             <div key={index + i} className='item'>\n  //               <div id='item_row_first'>\n  //                 <p>{el.FORMES}</p>\n  //                 <p>{el.TAILLE}</p>\n  //               </div>\n  //               <div id='item_row_second'>\n  //                 <p>{el.COULEUR}</p>\n  //                 <p>{el.PV + \"â‚¬\"}</p>\n  //               </div>\n  //               <div id='item_row_third'>\n  //                 <p>{el.FOURNISSEUR}</p>\n  //                 <p>{el.REFERENCE}</p>\n  //               </div>\n\n  //               <div>\n  //                 <Barcode code={el.CODES_BARRES} />\n  //               </div>\n\n  //             </div>\n  //           )\n  //         }\n  //         return multiply\n  //       }\n  //     })\n  //   }\n  // }\n  // return (\n  //   <div className=\"App\">\n  //     <header>\n  //       <h1>Imprimer mes Ã©tiquettes</h1>\n  //     </header>\n  //     <div>\n  //       <div className='group_upload'>\n  //         <input onChange={(e) => onChange(e)} type='file' id='files' accept='.csv' required />\n  //         {file && <input type='button' value='IMPRIMER' onClick={() => {\n  //           var printWindow = window.open('', 'PRINT', 'height=400,width=21cm')\n  //           printWindow.document.write('<html><head><title>Print DIV Content</title>');\n  //           printWindow.document.write('<link rel=\"stylesheet\" href=\"./App.css\" />')\n  //           printWindow.document.write('</head><body >');\n  //           printWindow.document.write(document.getElementById('preview').innerHTML);\n  //           printWindow.document.write('</body></html>');\n  //         }} />}\n  //       </div>\n  //       {file && <div id='preview'>\n  //         {displayLabels(file)}\n  //       </div>}\n  //     </div>\n  //   </div>\n  // );\n\n  return (\n    <div>\n      <Config c={(f) => {\n          Papa.parse(f, {\n      header: true,\n      complete: (res) => {\n        console.log(res)\n        setFile(res.data)\n      }\n    })\n      }} />\n\n      {file && <div>\n        {/* <ReactToPrint trigger={() => <a href='#'>Print his out</a>} content={() => componentRef.current } /> */}\n        <Print file={file} ref={componentRef} />\n        <button onClick={() => handlePrint()}>PRINT ME</button>\n        </div>}\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}